#!/usr/bin/env ruby

require_relative '../lib/pdfium'
require 'pathname'
require 'tempfile'
require 'os'

COMPARE_GM = false

# puts "Waiting for profiler attachment (PID: #{Process.pid})\nPress enter to continue"
# gets

# Document.where(original_extension:'pdf',access:Document::PUBLIC).where("random() < 0.01").limit(30).map{|d|d.original_file_path}

pdfs=Pathname.glob(Pathname.new(__FILE__).dirname.join("pdfs","*.pdf") )
def comma(num)
  num.to_s.chars.to_a.reverse.each_slice(3).map(&:join).join(",").reverse
end

SIZES=[
  [1000,0],
  [700,0],
  [180,0],
  [60,75]
]

def dir_size(path)
  `du #{path} | awk '{print $1}'`.chomp.to_f
end

def pdfium_extract(file)
  page_count = size = 0
  Dir.mktmpdir do |dir|
    doc = PDFium::Document.new( file )
    0.upto(doc.page_count-1) do | pg_num |
      page = PDFium::Page.new(doc, pg_num)
      tf = "#{dir}/pdf-page-test-#{pg_num}-%h-%w.gif"
      page.render_sizes(tf, SIZES) or die "failed to render pg #{pg_num} of #{file}"
    end
    page_count = doc.page_count
    size = dir_size(dir)
  end
  return [page_count, size]
end

GM="/usr/local/bin/gm"
def gm_extract(pdf, pdfium_pages)
  pages  = `pdfinfo #{pdf} 2>/dev/null | grep Pages | awk '{ print $2 }'`.to_i
  if pages!=pdfium_pages
    STDERR.puts "#{pdf} bad page count! #{pdfium_pages} != #{pages}"
  end
  Dir.mktmpdir do |dir|
    0.upto(pages-1) do |page|
      base   = "#{dir}/pdf-page-test-#{page}"
      master = "#{base}-master.gif"
      `#{GM} convert -density 150 -resize 1000x #{pdf}[#{page}] #{master} >/dev/null 2>&1`
      `#{GM} convert -resize 700x #{master} #{base}-700.gif >/dev/null 2>&1`
      `#{GM} convert -resize 180x #{master} #{base}-180.gif >/dev/null 2>&1`
      `#{GM} convert -resize 60x  #{master} #{base}-60.gif >/dev/null 2>&1`
    end
    return [dir_size(dir)]
  end
end

def execute_cmd
  start = Time.now
  results = yield
  results.push(Time.now - start)
  results
end

puts "                                                                                         FileSize (MB)                    Seconds"
puts "Pass PDF                                                             Pgs  Memory  PDFium      GM      Diff      PDFium      GM      Diff"
pass = 1
timings = []
loop do
  loop_start = Time.now
  pdfs.each do | file |
    next if file.to_s.match(/invalid/)
    gm_size = gm_elapsed = 0
    ( page_count, pd_size, pd_elapsed ) = execute_cmd do
      pdfium_extract(file)
    end
    if COMPARE_GM
      ( gm_size, gm_elapsed ) = execute_cmd do
        gm_extract(file, page_count)
      end
    end

    elapsed_diff = gm_elapsed - pd_elapsed
    size_diff    = gm_size    - pd_size

    puts "%3i %-60s   %4d %8s %7.2f %7.2f %8.2f%%     %7.2f %7.2f %8.2f%%" % [ pass,
                                        file.to_s.gsub("./test/pdfs/",''),
                                        page_count,
                                        comma(OS.rss_bytes),
                                        pd_size/1024, gm_size/1024, ( size_diff / pd_size ) * 100,
                                        pd_elapsed, gm_elapsed, ( elapsed_diff / pd_elapsed ) * 100
    ]
    GC.start(full_mark: true, immediate_sweep: true)
  end
  timings.push([pass, Time.now-loop_start,comma(OS.rss_bytes)])
  pass += 1
  puts timings.map{|pn,elapsed,mem| "%d %0.2f %s" % [pn, elapsed, mem] }.join("; ")
end
